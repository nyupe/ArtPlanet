<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper    
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"    
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace속성:매퍼파일의 완전한경로 .xml는 생략 -->
<!-- ※ibatis와는 다르게 id값에 .(dot)를 사용 못한다. -->

<mapper namespace="mybatis.RecAndProjAuth">
	
	<!-- 배치키정보 CRUD 쿼리문  -->
	
	<!-- 인증 배치키 디비입력 처리 -->
	<insert id="recAuthInsert" parameterType="java.util.Map" >
			INSERT INTO RECAUTH(ORDR_IDXX, RES_CD, BATCH_KEY, CARD_CD, BUYR_NAME, MEMBERNO)
			VALUES(#{ordr_idxx}, #{res_cd}, #{batch_key}, #{card_cd}, #{buyr_name}, SEQ_MEMBER.NEXTVAL)
	</insert>
	
	<select id="recAuthSelectlist" parameterType="java.util.Map" resultType="RecAuthDTO">
		SELECT * FROM RECAUTH
	</select>
	<!-- 배치키로 결제시 인증테이블의 app_time업데이트하기      memberNo맞춰야함-->
	<select id="authAppTimeUpdate" parameterType="java.util.Map" >
			UPDATE RECAUTH SET APP_TIME = SYSDATE WHERE MEMBERNO = 119
	</select>
<!-- 	SEQ_MEMBER.NEXTVAL -->
	<!-- 블로그후원(일회성)정기인증정보 배치키 CRUD 쿼리문  memberNo맞춰야함 -->
	<!-- 인증 배치키 디비입력 처리 -->
	<insert id="projAuthInsert" parameterType="java.util.Map" >
			INSERT INTO PROJAUTH(ORDR_IDXX, RES_CD, BATCH_KEY, CARD_CD, BUYR_NAME, MEMBERNO)
			VALUES(#{ordr_idxx}, #{res_cd}, #{batch_key}, #{card_cd}, #{buyr_name}, SEQ_MEMBER.NEXTVAL)
	</insert>
	<select id="projAuthSelectlist" parameterType="java.util.Map" resultType="RecAuthDTO">
		SELECT * FROM PROJAUTH
	</select>
	<!--반드시 삭제쿼리문 집어넣을것  -->
	
	<!-- PROJECTSUPPORT테이블과 조인해서 PROJECTSUPPORTSUM컬럼만 셀렉트해오는 쿼리문 -->
	<select id="recAuthSelectProjectSupportSum" parameterType="java.util.Map" resultType="RecAuthDTO">
		SELECT PROJECTSUPPORTSUM FROM PROJAUTH R INNER JOIN PROJECTSUPPORT P ON R.MEMBERNO = P.MEMBERNO
	</select>
	
	<select id="recAuthSelectBatchKey" parameterType="java.util.Map" resultType="RecAuthDTO">
		SELECT BATCH_KEY FROM PROJAUTH R INNER JOIN PROJECTSUPPORT P ON R.MEMBERNO = P.MEMBERNO
	</select>
	
	
	<!-- 수업예제 쿼리문  -->
	<!-- <select id="memoIsLogin" parameterType="java.util.Map" resultType="int">
			SELECT COUNT(*) FROM MEMBER WHERE ID = #{id} and PWD = #{pwd}
	</select> 

	<select id="memoSelectlist" parameterType="java.util.Map" resultType="OneMemoDTO">
			SELECT * FROM (SELECT T.*, ROWNUM R FROM(SELECT O.*, NAME,(SELECT COUNT(*) FROM MEMOCOMMENT WHERE NO = O.NO ) commentCount FROM ONEMEMO O JOIN MEMBER M ON O.ID = M.ID
			<if test="searchColumn != null">
				WHERE ${searchColumn} LIKE '%' || #{searchWord} || '%'
			</if> 
			ORDER BY NO DESC) T)
			WHERE R BETWEEN #{start} AND #{end}
	</select>
	
	<select id="memoTotal" parameterType="java.util.Map" resultType="int">
			SELECT COUNT(*) FROM ONEMEMO
			<if test="searchColumn != null">
				WHERE ${searchColumn} LIKE '%' || #{searchWord} || '%'
			</if> 
	</select>
	
	<insert id="memoInsert" parameterType="java.util.Map" >
			INSERT INTO ONEMEMO(NO, TITLE, CONTENT, ID)
			VALUES(SEQ_ONEMEMO.NEXTVAL, #{title}, #{content}, #{id} )
	</insert>
	
	<select id="memoSelectOne" parameterType="java.util.Map" resultType="OneMemoDTO">
			SELECT O.*,NAME FROM ONEMEMO O JOIN MEMBER M ON O.ID = M.ID
			WHERE NO = #{no} 
	</select>
	
	<select id="memoUpdate" parameterType="java.util.Map" >
			UPDATE ONEMEMO SET TITLE = #{title}, CONTENT = #{content} WHERE NO = #{no}
	</select>
	
	<delete id="memoDelete" parameterType="java.util.Map" >
			DELETE ONEMEMO WHERE NO = #{no}
	</delete> -->
</mapper>
